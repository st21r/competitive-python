{
    "factrize_prime.py": {
        "prefix": "imlib factrize_prime",
        "body": "def init_factorize(lim=10**6+10, primes=None):\n    if primes is None:\n        table = [True] * (lim+1)\n        table[0:2] = False, False\n        for i in range(2, int(lim**0.5)+1):\n            if not table[i]: continue\n            for j in range(i*2, lim+1, i):\n                table[j] = False\n        primes = [i for i in range(lim+1) if table[i]]\n\n    def factorize(x):\n        res = []\n        for p in primes:\n            if p ** 2 > x: break\n            cnt = 0\n            while not x % p:\n                x //= p\n                cnt += 1\n            if cnt: res.append((p, cnt))\n        if x > 1: res.append((x, 1))\n        return res\n    \n    return factorize\n"
    },
    "get_prime.py": {
        "prefix": "imlib get_prime",
        "body": "def get_prime(lim):\n    table = [True] * (lim+1)\n    table[0:2] = False, False\n    for i in range(2, int(lim**0.5)+1):\n        if not table[i]: continue\n        for j in range(i*2, lim+1, i):\n            table[j] = False\n    return [i for i in range(lim+1) if table[i]]\n"
    },
    "mod.py": {
        "prefix": "imlib mod",
        "body": "MOD_L = 10**6+10\nfact = [1, 1] + [0] * (MOD_L-1)\nfact_inv = [1, 1] + [0] * (MOD_L-1)\ninv = [0, 1] + [0] * (MOD_L-1)\nfor i in range(2, MOD_L+1):\n    fact[i] = fact[i-1] * i % MOD\n    inv[i] = MOD - inv[MOD % i] * (MOD//i) % MOD\n    fact_inv[i] = fact_inv[i-1] * inv[i] % MOD\ndef mod_comb(n, m):\n    if n < m or n < 0 or m < 0: return 0\n    return fact[n] * (fact_inv[m] * fact_inv[n-m] % MOD) % MOD\n"
    },
    "get_divisor.py": {
        "prefix": "imlib get_divisor",
        "body": "def get_divisor(num):\n    f_divs, l_divs = [], []\n    for i in range(1, int(num**0.5)+1):\n        if not num % i:\n            f_divs.append(i)\n            if i != num // i:\n                l_divs.append(num // i)\n    return f_divs + l_divs[::-1]\n\n\nif __name__ == \"__main__\":\n    for i in range(100):\n        print(i, get_divisor(i))\n"
    },
    "factorize.py": {
        "prefix": "imlib factorize",
        "body": "def factorize(x, lim=10**6+10):\n    res = []\n    for i in range(2, int(lim**0.5)+1):\n        cnt = 0\n        while not x % i:\n            x //= i\n            cnt += 1\n        if cnt: res.append((i, cnt))\n    if x > 1: res.append((x, 1))\n    return res\n"
    },
    "is_prime.py": {
        "prefix": "imlib is_prime",
        "body": "def is_prime(x):\n    if x == 2: return True\n    if x == 1 or not x % 2: return False\n    for i in range(3, int(x**0.5)+1, 2):\n        if not x % i: return False\n    else: return True\n"
    },
    "header.py": {
        "prefix": "imlib header",
        "body": "import sys\nfrom bisect import bisect_left, bisect_right\nfrom collections import defaultdict, deque\nfrom itertools import product\nINF = int(1e18); arr4 = ((-1, 0), (0, -1), (1, 0), (0, 1))\ndef dmp(*args, sep=\" \", end=\"\\n\"): print(*args, sep=sep, end=end, file=sys.stderr)\nif \"DEBUG\" not in sys.argv: dmp = lambda *args: None\n"
    },
    "array_2d.py": {
        "prefix": "imlib array_2d",
        "body": "class Array2d:\n    def __init__(self, h, w, mode = int, init_val = 0, out_val = None):\n        self.h, self.w = h, w\n        self.data = [init_val] * (h*w)\n        self.init_val = init_val\n        self.out_val = out_val\n        assert mode in [int, str]\n        self.mode = mode\n    def __call__(self, data): # build with 2d-list\n        assert len(data) == self.h\n        for i in range(self.h):\n            assert len(data[i]) == self.w\n            for j in range(self.w):\n                self.data[i*self.w+j] = data[i][j]\n    def input(self):\n        for i in range(self.h):\n            l = input() if self.mode == str else list(map(int, input().split()))\n            assert len(l) == self.w\n            for j in range(self.w):\n                self.data[i*self.w+j] = l[j]\n        return self\n    def _get(self, i, j):\n        if i < 0 or j < 0 or i >= self.h or j >= self.w: return self.out_val\n        return self.data[i*self.w+j]\n    def _set(self, i, j, value):\n        if i < 0 or j < 0 or i >= self.h or j >= self.w: return False\n        self.data[i*self.w+j] = value\n        return True\n    def __getitem__(self, idx):\n        assert type(idx) == tuple\n        i, j = idx\n        return self._get(i, j)\n    def __setitem__(self, idx, value):\n        assert type(idx) == tuple\n        i, j = idx\n        self._set(i, j, value)\n    def row(self, i):\n        assert 0 <= i < self.h\n        return self.data[self.w*i:self.w*(i+1)]\n    def col(self, i):\n        assert 0 <= i < self.w\n        return self.data[i::self.w]\n    def get_copy(self):\n        a = Array2d(self.h, self.w, mode=self.mode, init_val=self.init_val, out_val=self.out_val)\n        a.data = self.data[:]\n        return a\n    def __str__(self):\n        res = \"\"\n        sep = \"\" if self.mode == str else \" \"\n        for i in range(self.h):\n            res += sep.join(map(str, self.data[i*self.w:(i+1)*self.w])) + \"\\n\"\n        return res\n    def all(self, val, y1=0, x1=0, y2=None, x2=None):\n        if y2 is None: y2 = self.h\n        if x2 is None: x2 = self.w\n        assert y1 <= y2 and x1 <= x2\n        y1, y2 = max(y1, 0), min(y2, self.h)\n        x1, x2 = max(x1, 0), min(x2, self.w)\n        for y in range(y1, y2):\n            for x in range(x1, x2):\n                if self.data[y*self.w+x] != val:\n                    return False\n        return True\n    def any(self, val, y1=0, x1=0, y2=None, x2=None):\n        if y2 is None: y2 = self.h\n        if x2 is None: x2 = self.w\n        assert y1 <= y2 and x1 <= x2\n        y1, y2 = max(y1, 0), min(y2, self.h)\n        x1, x2 = max(x1, 0), min(x2, self.w)\n        for y in range(y1, y2):\n            for x in range(x1, x2):\n                if self.data[y*self.w+x] == val:\n                    return True\n        return False\n    def count(self, val, y1=0, x1=0, y2=None, x2=None):\n        if y2 is None: y2 = self.h\n        if x2 is None: x2 = self.w\n        assert y1 <= y2 and x1 <= x2\n        y1, y2 = max(y1, 0), min(y2, self.h)\n        x1, x2 = max(x1, 0), min(x2, self.w)\n        cnt = 0\n        for y in range(y1, y2):\n            for x in range(x1, x2):\n                cnt += self.data[y*self.w+x] == val\n        return cnt \n    def fill(self, val, y1=0, x1=0, y2=None, x2=None):\n        if y2 is None: y2 = self.h\n        if x2 is None: x2 = self.w\n        assert y1 <= y2 and x1 <= x2\n        y1, y2 = max(y1, 0), min(y2, self.h)\n        x1, x2 = max(x1, 0), min(x2, self.w)\n        for y in range(y1, y2):\n            for x in range(x1, x2):\n                self.data[y*self.w+x] = val\n    def rotate(self):\n        tmp = [None] * (self.h*self.w)\n        h, w = self.w, self.h\n        for i in range(h):\n            for j in range(w):\n                tmp[i*w+j] = self._get(w-j-1, i)\n        self.data = tmp\n        self.h, self.w = h, w\n"
    },
    "bellman_ford.py": {
        "prefix": "imlib bellman_ford",
        "body": "def bellman_ford(edges, n, s):\n    d = [INF] * n\n    d[s] = 0\n    for i in range(n):\n        for f, t, c in edges:\n            if d[f] == INF: continue\n            if d[t] > d[f] + c:\n                if i == n-1: d[t] = -INF\n                else: d[t] = d[f] + c\n    for i in range(n):\n        for f, t, c in edges:\n            if d[f] == INF: continue\n            d[t] = min(d[t], d[f] + c)\n    return d\n"
    },
    "warshall_floyd.py": {
        "prefix": "imlib warshall_floyd",
        "body": "# グラフの初期値は必ずINFにすること\ndef warshall_floyd(d, n):\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n    return d\n"
    },
    "dijkstra.py": {
        "prefix": "imlib dijkstra",
        "body": "from heapq import heappop, heappush\nINF = float(\"inf\")\n\ndef dijkstra(graph, n, s):\n    d = [INF] * n\n    d[s] = 0\n    q = [(0, s)]\n    while q:\n        dist, v = heappop(q)\n        if d[v] < dist: continue\n        for nv, cost in graph[v]:\n            if d[nv] > d[v] + cost:\n                d[nv] = d[v] + cost\n                heappush(q, (d[nv], nv))\n    return d\n"
    },
    "binary_indexed_tree.py": {
        "prefix": "imlib binary_indexed_tree",
        "body": "class BIT:\n    def __init__(self, val):\n        if type(val) == int:\n            self.n = val\n            self.data = [0] * (self.n+1)\n        elif type(val) == list:\n            self.n = len(val)\n            self.data = [0] * (self.n+1)\n            self.build(val)\n        else: raise TypeError(type(val))\n    \n    def build(self, data):\n        for i in range(1, self.n+1):\n            self.data[i] += data[i-1]\n            j = i + (i & -i)\n            if j <= self.n:\n                self.data[j] += self.data[i]\n    \n    class _Element:\n        def __init__(self, outer, i, val):\n            self.outer = outer\n            self.i = i\n            self.val = val\n        def __iadd__(self, x):\n            self.outer.add(self.i, int(x))\n        def __isub__(self, x):\n            self.outer.add(self.i, -int(x))\n        def __int__(self):\n            return self.val\n        def __str__(self):\n            return str(self.val)\n\n    def __getitem__(self, i):\n        if not (0 <= i < self.n): raise IndexError(i)\n        return self._Element(self, i, self.sum(i, i+1))\n    \n    def __setitem__(self, i, x):\n        if not (0 <= i < self.n): raise IndexError(i)\n        if x == None: return\n        self.add(i, -self.sum(i, i+1))\n        self.add(i, x)\n    \n    def items(self):\n        res, tmp = [0] * self.n, 0\n        for i in range(self.n):\n            s = self._sum(i+1)\n            res[i] = s-tmp\n            tmp = s\n        return res\n     \n    def __str__(self):\n        return \"[\" + \", \".join(map(str, self.items())) + \"]\"\n    \n    def _sum(self, i):\n        assert 0 <= i <= self.n\n        res = 0\n        while i > 0:\n            res += self.data[i]\n            i -= i & -i\n        return res\n    \n    def sum(self, i, j=None):\n        if j is None: return self._sum(i)\n        return self._sum(j) - self._sum(i)\n    \n    def add(self, i, x):\n        assert 0 <= i < self.n\n        i += 1\n        while i <= self.n:\n            self.data[i] += x\n            i += i & -i\n    \n    def lower_bound(self, x):\n        cur, s, k = 0, 0, 1 << (self.n.bit_length()-1)\n        while k:\n            nxt = cur + k \n            if nxt <= self.n and s + self.data[nxt] < x:\n                s += self.data[nxt]\n                cur = nxt\n            k >>= 1\n        return cur\n"
    },
    "double_bit.py": {
        "prefix": "imlib double_bit",
        "body": "class Double_BIT:\n    class _BIT:\n        def __init__(self, n):\n            self.n = n\n            self.data = [0] * (self.n+1)\n        def sum(self, i):\n            res = 0\n            while i > 0:\n                res += self.data[i]\n                i -= i & -i\n            return res\n        def add(self, i, x):\n            i += 1\n            while i <= self.n:\n                self.data[i] += x\n                i += i & -i\n        \n    def __init__(self, n):\n        self.n = n\n        self.p = self._BIT(n)\n        self.q = self._BIT(n)\n\n    def __getitem__(self, i):\n        if not (0 <= i < self.n): raise IndexError(i)\n        return self.sum(i, i+1)\n    \n    def add(self, l, r, x):\n        assert 0 <= l < r <= self.n\n        self.p.add(l, -x*l)\n        self.p.add(r, x*r)\n        self.q.add(l, x)\n        self.q.add(r, -x)\n    \n    def _sum(self, i):\n        assert 0 <= i <= self.n\n        return self.p.sum(i) + self.q.sum(i) * i\n    \n    def sum(self, i, j=None):\n        if j is None: return self._sum(i)\n        return self._sum(j) - self._sum(i)\n"
    },
    "segment_tree.py": {
        "prefix": "imlib segment_tree",
        "body": "class SegmentTree:\n    def __init__(self, n, func=lambda x, y: min(x, y), ide=float(\"inf\")):\n        self.n, self.m = n, 1 << (n-1).bit_length()\n        self.data = [ide] * (self.m*2)\n        self.func, self.ide = func, ide\n\n    def build(self, data):\n        for i, x in enumerate(data):\n            self.data[self.m+i] = x\n        for i in range(self.m-1, 0, -1):\n            self.data[i] = self.func(self.data[i*2], self.data[i*2+1])\n\n    def update(self, i, x):\n        i += self.m\n        self.data[i] = x\n        while i > 1:\n            i >>= 1\n            self.data[i] = self.func(self.data[i*2], self.data[i*2+1])\n\n    def query(self, l, r):\n        l += self.m; r += self.m \n        res = self.ide\n        while l < r:\n            if l & 1:\n                res = self.func(res, self.data[l])\n                l += 1\n            if r & 1:\n                res = self.func(res, self.data[r-1])\n            l >>= 1; r >>= 1\n        return res\n  \n    def get(self, i):\n        return self.data[self.m+i]\n    \n    def get_data(self):\n        return self.data[self.m:self.m+self.n]\n\n    def __setitem__(self, idx, val):\n        assert isinstance(idx, int) and -self.n <= idx < self.n\n        self.update(idx % self.n, val)\n\n    def __getitem__(self, idx):\n        if isinstance(idx, slice):\n            l, r, _ = idx.indices(self.n)\n            assert l <= r\n            return self.query(l, r)\n        if isinstance(idx, int) and -self.n <= idx < self.n:\n            return self.get(idx % self.n)\n        raise AssertionError\n"
    },
    "cumsum.py": {
        "prefix": "imlib cumsum",
        "body": "class Cumsum:\n    def __init__(self, a):\n        self.n = len(a)\n        self.s = [0] * (self.n+1)\n        for i in range(self.n):\n            self.s[i+1] = self.s[i] + a[i]\n    def sum(self, l, r):\n        return self.s[r]-self.s[l]\n    def __getitem__(self, i):\n        return self.s[i]\n"
    },
    "lazy_segment_tree.py": {
        "prefix": "imlib lazy_segment_tree",
        "body": "# 遅延評価SegmentTree (RMQ and RUQ)\n# quety(l, r): 区間[l,r)の最小値\n# update(l, r, x): 区間[l,r)に含まれる全ての値をxに更新\nclass LazySegmentTree:\n    INF = float(\"inf\")\n\n    def __init__(self, n):\n        self.n = 1 << (n-1).bit_length()\n        self.data = [self.INF] * (self.n*2)\n        self.lazy = [None] * (self.n*2)\n    \n    def build(self, data):\n        for i, x in enumerate(data):\n            self.data[self.n+i] = x\n        for i in range(self.n-1, 0, -1):\n            self.data[i] = min(self.data[i*2], self.data[i*2+1])\n        \n    def query(self, l, r):\n        if not l < r: return self.INF\n        self.__propagate(self.__getidx(l, r))\n\n        l += self.n; r += self.n \n        res = self.INF\n        while l < r:\n            if l & 1:\n                res = min(res, self.data[l])\n                l += 1\n            if r & 1:\n                res = min(res, self.data[r-1])\n            l >>= 1; r >>= 1\n        return res\n    \n    def update(self, l, r, x):\n        if not l < r: return\n        idx = self.__getidx(l, r)\n        self.__propagate(idx)\n\n        l += self.n; r += self.n \n        while l < r:\n            if l & 1:\n                self.data[l], self.lazy[l] = x, x\n                l += 1\n            if r & 1:\n                self.data[r-1], self.lazy[r-1] = x, x\n            l >>= 1; r >>= 1\n    \n        for i in idx:\n            self.data[i] = min(self.data[i*2], self.data[i*2+1])\n\n    def __getidx(self, l, r):\n        l += self.n; r += self.n \n        lm = l // ((l & -l) << 1)\n        rm = r // ((r & -r) << 1)\n        res = []\n        while l < r:\n            if l <= lm: res.append(l)\n            if r <= rm: res.append(r)\n            l >>= 1; r >>= 1\n        while l:\n            res.append(l)\n            l >>= 1\n        return res\n    \n    def __propagate(self, idx):\n        for i in reversed(idx):\n            val = self.lazy[i]\n            if val is None: continue\n            self.lazy[i*2] = val; self.lazy[i*2+1] = val\n            self.data[i*2] = val; self.data[i*2+1] = val\n            self.lazy[i] = None\n"
    },
    "union_find.py": {
        "prefix": "imlib union_find",
        "body": "class UnionFind:\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n    def find(self, x):\n        if self.parents[x] < 0: return x\n        self.parents[x] = self.find(self.parents[x])\n        return self.parents[x]\n    def merge(self, x, y):\n        x, y = self.find(x), self.find(y)\n        if x == y: return\n        if self.size(x) < self.size(y): x, y = y, x\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n    def size(self, x):\n        return -self.parents[self.find(x)]\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n    def group(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n    def groups(self):\n        res = [set() for _ in range(self.n)]\n        for i in range(self.n):\n            res[self.find(i)].add(i)\n        res = [x for x in res if len(x) > 0]\n        return res\n    def __str__(self):\n        return '\\n'.join([str(x) for x in self.groups()])\n"
    },
    "sorted_set.py": {
        "prefix": "imlib sorted_set",
        "body": "from math import ceil, sqrt\nfrom bisect import bisect_left\n\nclass SortedSet():\n    BUCKET_RATIO = 16\n    SPLIT_RATIO = 24\n    \n    def __init__(self, a = []):\n        a = list(a)\n        n = len(a)\n        if any(a[i] > a[i + 1] for i in range(n - 1)):\n            a.sort()\n        if any(a[i] >= a[i + 1] for i in range(n - 1)):\n            a, b = [], a\n            for x in b:\n                if not a or a[-1] != x:\n                    a.append(x)\n        n = self.size = len(a)\n        num_bucket = int(ceil(sqrt(n / self.BUCKET_RATIO)))\n        self.a = [a[n * i // num_bucket : n * (i + 1) // num_bucket] for i in range(num_bucket)]\n\n    def __iter__(self):\n        for i in self.a:\n            for j in i: yield j\n\n    def __reversed__(self):\n        for i in reversed(self.a):\n            for j in reversed(i): yield j\n    \n    def __eq__(self, other):\n        return list(self) == list(other)\n    \n    def __len__(self):\n        return self.size\n    \n    def __str__(self):\n        s = str(list(self))\n        return \"{\" + s[1 : len(s) - 1] + \"}\"\n\n    def _position(self, x):\n        \"return the bucket, index of the bucket and position in which x should be. self must not be empty.\"\n        for i, a in enumerate(self.a):\n            if x <= a[-1]: break\n        return (a, i, bisect_left(a, x))\n\n    def __contains__(self, x):\n        if self.size == 0: return False\n        a, _, i = self._position(x)\n        return i != len(a) and a[i] == x\n\n    def add(self, x):\n        \"Add an element and return True if added. / O(√N)\"\n        if self.size == 0:\n            self.a = [[x]]\n            self.size = 1\n            return True\n        a, b, i = self._position(x)\n        if i != len(a) and a[i] == x: return False\n        a.insert(i, x)\n        self.size += 1\n        if len(a) > len(self.a) * self.SPLIT_RATIO:\n            mid = len(a) >> 1\n            self.a[b:b+1] = [a[:mid], a[mid:]]\n        return True\n    \n    def _pop(self, a, b, i):\n        ans = a.pop(i)\n        self.size -= 1\n        if not a: del self.a[b]\n        return ans\n\n    def remove(self, x):\n        \"Remove an element and return True if removed. / O(√N)\"\n        if self.size == 0: return False\n        a, b, i = self._position(x)\n        if i == len(a) or a[i] != x: return False\n        self._pop(a, b, i)\n        return True\n    \n    def __getitem__(self, i):\n        \"Return the i-th element.\"\n        if i < 0:\n            for a in reversed(self.a):\n                i += len(a)\n                if i >= 0: return a[i]\n        else:\n            for a in self.a:\n                if i < len(a): return a[i]\n                i -= len(a)\n        raise IndexError\n    \n    def pop(self, i = -1):\n        \"Pop and return the i-th element.\"\n        if i < 0:\n            for b, a in enumerate(reversed(self.a)):\n                i += len(a)\n                if i >= 0: return self._pop(a, ~b, i)\n        else:\n            for b, a in enumerate(self.a):\n                if i < len(a): return self._pop(a, b, i)\n                i -= len(a)\n        raise IndexError\n    \n    def index(self, x):\n        \"Count the number of elements < x.\"\n        ans = 0\n        for a in self.a:\n            if a[-1] >= x:\n                return ans + bisect_left(a, x)\n            ans += len(a)\n        return ans\n"
    },
    "sorted_multiset.py": {
        "prefix": "imlib sorted_multiset",
        "body": "from math import ceil, sqrt\nfrom bisect import bisect_left, bisect_right\n\nclass SortedMultiSet():\n    BUCKET_RATIO = 16\n    SPLIT_RATIO = 24\n    \n    def __init__(self, a = []):\n        a = list(a)\n        n = len(a)\n        if any(a[i] > a[i + 1] for i in range(n - 1)):\n            a.sort()\n        if any(a[i] >= a[i + 1] for i in range(n - 1)):\n            a, b = [], a\n            for x in b:\n                a.append(x)\n        n = self.size = len(a)\n        num_bucket = int(ceil(sqrt(n / self.BUCKET_RATIO)))\n        self.a = [a[n * i // num_bucket : n * (i + 1) // num_bucket] for i in range(num_bucket)]\n\n    def __iter__(self):\n        for i in self.a:\n            for j in i: yield j\n\n    def __reversed__(self):\n        for i in reversed(self.a):\n            for j in reversed(i): yield j\n    \n    def __eq__(self, other):\n        return list(self) == list(other)\n    \n    def __len__(self):\n        return self.size\n    \n    def __str__(self):\n        s = str(list(self))\n        return \"{\" + s[1 : len(s) - 1] + \"}\"\n\n    def _position(self, x):\n        \"return the bucket, index of the bucket and position in which x should be. self must not be empty.\"\n        for i, a in enumerate(self.a):\n            if x <= a[-1]: break\n        return (a, i, bisect_left(a, x))\n\n    def __contains__(self, x):\n        if self.size == 0: return False\n        a, _, i = self._position(x)\n        return i != len(a) and a[i] == x\n    \n    def count(self, x):\n        \"Count the number of x.\"\n        return self.index_right(x) - self.index(x)\n\n    def add(self, x):\n        \"Add an element and return True if added. / O(√N)\"\n        if self.size == 0:\n            self.a = [[x]]\n            self.size = 1\n            return True\n        a, b, i = self._position(x)\n        a.insert(i, x)\n        self.size += 1\n        if len(a) > len(self.a) * self.SPLIT_RATIO:\n            mid = len(a) >> 1\n            self.a[b:b+1] = [a[:mid], a[mid:]]\n        return True\n    \n    def _pop(self, a, b, i):\n        ans = a.pop(i)\n        self.size -= 1\n        if not a: del self.a[b]\n        return ans\n\n    def remove(self, x):\n        \"Remove an element and return True if removed. / O(√N)\"\n        if self.size == 0: return False\n        a, b, i = self._position(x)\n        if i == len(a) or a[i] != x: return False\n        self._pop(a, b, i)\n        return True\n    \n    def __getitem__(self, i):\n        \"Return the i-th element.\"\n        if i < 0:\n            for a in reversed(self.a):\n                i += len(a)\n                if i >= 0: return a[i]\n        else:\n            for a in self.a:\n                if i < len(a): return a[i]\n                i -= len(a)\n        raise IndexError\n    \n    def pop(self, i = -1):\n        \"Pop and return the i-th element.\"\n        if i < 0:\n            for b, a in enumerate(reversed(self.a)):\n                i += len(a)\n                if i >= 0: return self._pop(a, ~b, i)\n        else:\n            for b, a in enumerate(self.a):\n                if i < len(a): return self._pop(a, b, i)\n                i -= len(a)\n        raise IndexError\n    \n    def index(self, x):\n        \"Count the number of elements < x.\"\n        ans = 0\n        for a in self.a:\n            if a[-1] >= x:\n                return ans + bisect_left(a, x)\n            ans += len(a)\n        return ans\n    \n    def index_right(self, x):\n        \"Count the number of elements <= x.\"\n        ans = 0\n        for a in self.a:\n            if a[-1] > x:\n                return ans + bisect_right(a, x)\n            ans += len(a)\n        return ans\n"
    },
    "union_find_2d.py": {
        "prefix": "imlib union_find_2d",
        "body": "class UnionFind2D:\n    def __init__(self, h, w):\n        self.h, self.w, self.n = h, w, h*w\n        self.parents = [-1] * self.n\n    def _find(self, v):\n        if self.parents[v] < 0: return v\n        self.parents[v] = self._find(self.parents[v])\n        return self.parents[v]\n    def find(self, y, x):\n        assert 0 <= y < self.h and 0 <= x < self.w\n        return self._find(y*self.w+x)\n    def merge(self, y1, x1, y2, x2):\n        assert 0 <= y1 < self.h and 0 <= x1 < self.w\n        assert 0 <= y2 < self.h and 0 <= x2 < self.w\n        v1, v2 = self._find(y1*self.w+x1), self._find(y2*self.w+x2)\n        if v1 == v2: return\n        if self._size(v1) < self._size(v2): v1, v2 = v2, v1\n        self.parents[v1] += self.parents[v2]\n        self.parents[v2] = v1\n    def same(self, y1, x1, y2, x2):\n        assert 0 <= y1 < self.h and 0 <= x1 < self.w\n        assert 0 <= y2 < self.h and 0 <= x2 < self.w\n        return self._find(y1*self.w+x1) == self._find(y2*self.w+x2)\n    def _size(self, v):\n        return -self.parents[self._find(v)]\n    def size(self, y, x):\n        assert 0 <= y < self.h and 0 <= x < self.w\n        return self._size(y*self.w+x)\n    def roots(self):\n        return [v for v, s in enumerate(self.parents) if s < 0]\n    def group(self, y, x):\n        assert 0 <= y < self.h and 0 <= x < self.w\n        root = self._find(y*self.w+x)\n        return [(v//self.w, v%self.w) for v in range(self.n) if self._find(v) == root]\n    def groups(self):\n        res = [set() for _ in range(self.n)]\n        for i in range(self.n):\n            res[self._find(i)].add((i//self.w, i%self.w))\n        res = [g for g in res if len(g) > 0]\n        return res\n    def board(self):\n        b = [[0] * self.w for _ in range(self.h)]\n        cnt = 1\n        for g in self.groups():\n            if len(g) == 1: continue\n            for y, x in g:\n                b[y][x] = cnt\n            cnt += 1\n        return b\n    def __str__(self):\n        return \"\\n\".join(map(str, self.board()))"
    }
}